import { EventState } from "utils/constants";
import { EventLocation } from "./EventLocation";
import { Group } from "./Group";
import { Profile } from "./Profile";

export interface CalendarEvent {
    id?: string;
    name: string;
    locationName?: string;
    endLocation: EventLocation;
    externalUrl?: string;
    startDay: number;
    startMonth: number;
    startYear: number;
    approximateStartTime: Date;
    approximateStartTime_utc: Date;
    approximateStartTime_zone: string;
    approximateEndTime: Date;
    approximateEndTime_utc: Date;
    approximateEndTime_zone: string;
    endDay?: number;
    endMonth?: number;
    endYear?: number;
    ics: string;
    isPrivate: boolean;
    description?: string;
    country: string;
    city: string;
    openGraphImage?: string;
    isOpen: boolean;
    allowRegistration: boolean;
    source?: string;
    scrapedOriginalId?: string;
    status?: EventState;
    organizerGroupId?: string;
    participatingFee?: number;
    stripeProductId?: string;
    stripePricingId?: string;
    eventTypes?: any;
    hashtag?: string;
    participatingFeeType: string;
    noticeOfRacePDF?: string;
    mediaWaiverPDF?: string;
    disclaimerPDF?: string;
    isCrewed: boolean;
    crewedMinValue?: number;
    crewedMaxValue?: number;
    requireCovidCertificate: boolean;
    requiredCertifications: any[];
    requireEmergencyContact: boolean;
    requireImmigrationInfo: boolean;
    requireMedicalProblems: boolean;
    requireFoodAllergies: boolean;
    createdAt: Date;
    updatedAt: Date;
    ownerId: string;
    createdById: string;
    updatedById: string;
    developerId: string;
    owner: Profile;
    createdBy: Profile;
    updatedBy: Profile;
    lon: number;
    lat: number;
    editors: Profile[];
    groups: Group[];
    isEditor: boolean;
    isParticipant: boolean;
    organizerGroupDetail: Group;
    isPaidEvent: boolean;
    isPaid: boolean;
    agreedWaivers?: any[];
}
